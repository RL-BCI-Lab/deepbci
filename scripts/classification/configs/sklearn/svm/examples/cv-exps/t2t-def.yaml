parent_dir: logocv-svm

subjects: [1,2,3,4,5,6,7,8,9]

# Data Config
groups:
  OA:
    trials: eval(list(range(1, 10+1)))
    data_file: eeg.csv
    true_fs: false
    preload_epoch_indexes:
      generate_async_epochs:
        step_size: 100
        map_type: down
        
  # OA_lb:
  #   trials: eval(list(range(1, 10+1)))
  #   data_file: eeg.csv
  #   true_fs: false
  #   preload_epoch_indexes:
  #     generate_async_epochs:
  #       step_size: 100
  #       map_type: down
  #       label_boundary: [-200, 200]

  BGS:
    trials: eval(list(range(1, 10+1)))
    data_file: eeg.csv
    true_fs: False
    preload_epoch_indexes:
      generate_async_epochs:
        step_size: 100
        map_type: down

  # BGS_lb:
  #   trials: eval(list(range(1, 10+1)))
  #   data_file: eeg.csv
  #   true_fs: False
  #   preload_epoch_indexes:
  #     generate_async_epochs:
  #       step_size: 100
  #       map_type: down
  #       label_boundary: [-200, 200]
    # preload_epoch_indexes:
    #   load_epochs:
    #     columns: [timestamps, labels]
    # preload_epoch_indexes:
    #   generate_sync_epochs:
    #     use_events: [1, 2]

# Mutate Config
mutate:
  filter:
    apply_func:
      select: null
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.filter
        l_freq: 0.1
        h_freq: 30
        method: iir
        verbose: False
        iir_params:
          order: 4
          ftype: butter
          output: sos

  epoch:
    apply_func:
      select: null
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.epoch
        tmin: 0
        tmax: 0.695
        preload: true
        picks: [eeg]
        verbose: WARNING
        baseline: null

  resample:
    apply_method:
      select: null
      method:
        name: resample
        kwargs: 
          sfreq: 128

  to_numpy:
    apply_func:
      select: null
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.to_numpy
        units: uV

  upsample_train:
    apply_func:
      select: [train]
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.balance
        btype: upsample

  compress_dims:
    select: null
    func: 
      _partial_: True
      _target_: deepbci.data_utils.mutators.compress_dims
      start: 1

  compress_trials:
   compress: 
      select: [train]
      compress_level: subject

  compress_datasets:
    compress: 
      select: [train]
      compress_level: group

  rescale:
    apply_func:
      select: [train]
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.rescale
        scaler:
          _target_: deepbci.data_utils.scalers.MinMax
          axis: [0]
        save: True 
        filepath: scalers.pickle

  apply_rescale:
    apply_func:
      select: [test]
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.rescale
        load: true 
        filepath: scalers.pickle
          
  log_class_info:
    apply_func:
      select:
      - [train, test]
      func:
        _partial_: True
        _target_: deepbci.data_utils.mutators.log_class_info

# Model Config
model_wrapper:
  _target_: deepbci.models.wrappers.Sklearn
  model: 
    _target_: sklearn.svm.SVC
    C: 1.0
    kernel: linear
    class_weight: 
      _target_: deepbci.utils.class_weight.compute_class_weight
      y: ${get_labels:train}
  
model_args:

  logo_level: ['dataset', 'subject', 'trial']

  seed: 0

  dataset:
    shuffle: True

  save:
    filepath: ${join:models,model.pickle}

  evaluate_metrics:
    csv:
      bACC:
        _partial_: True
        _target_: sklearn.metrics.balanced_accuracy_score
      ACC:
        _partial_: True
        _target_: sklearn.metrics.accuracy_score
      tpr:
        _partial_: True
        _target_: sklearn.metrics.recall_score
      ppv:
        _partial_: True
        _target_: sklearn.metrics.precision_score
      tnr:
        _partial_: True
        _target_: sklearn.metrics.recall_score
        pos_label: 0
      F1: 
        _partial_: True
        _target_: sklearn.metrics.f1_score
      confusion_matrix:
        _partial_: True
        _target_: sklearn.metrics.confusion_matrix
    log:
      - confusion_matrix
    argmax_axis: 1