parent_dir: logocv-v4-svm-async

subjects: [1,2,3,4,5,6,7,8,9]

groups:
  OA:
    trials: eval(list(range(1, 10+1)))
    data_file: eeg.csv
    true_fs: false
    preload_epoch_indexes:
      generate_async_epochs:
        step_size: 100
        map_type: down
        
  # OA_lb:
  #   trials: eval(list(range(1, 10+1)))
  #   data_file: eeg.csv
  #   true_fs: false
  #   preload_epoch_indexes:
  #     generate_async_epochs:
  #       step_size: 100
  #       map_type: down
  #       label_boundary: [-200, 200]

  BGS:
    trials: eval(list(range(1, 10+1)))
    data_file: eeg.csv
    true_fs: False
    preload_epoch_indexes:
      generate_async_epochs:
        step_size: 100
        map_type: down

  # BGS_lb:
  #   trials: eval(list(range(1, 10+1)))
  #   data_file: eeg.csv
  #   true_fs: False
  #   preload_epoch_indexes:
  #     generate_async_epochs:
  #       step_size: 100
  #       map_type: down
  #       label_boundary: [-200, 200]
    # preload_epoch_indexes:
    #   load_epochs:
    #     columns: [timestamps, labels]
    # preload_epoch_indexes:
    #   generate_sync_epochs:
    #     use_events: [1, 2]

mutate:
  filter:
    apply_func:
      select: null
      func:
      - filter:
          l_freq: 0.1
          h_freq: 30
          method: iir
          verbose: false
          iir_params:
            order: 4
            ftype: butter
            output: sos

  epoch:
    apply_func:
      select: null
      func:
      - epochs:
          tmin: 0.0
          tmax: 0.695
          preload: true
          picks: [eeg]
          verbose: WARNING
          baseline: null

  resample:
    apply_method:
      select: null
      method:
        resample:
          sfreq: 128

  to_numpy:
    apply_func: 
      select: null
      func:
      - to_numpy:
          units: uV

  upsample_train:
    apply_func:
      select: 
      - [train]
      func:
      - balance:
          btype: upsample
          verbose: True

  expand_dims:
    apply_func:
      select: null
      func: 
      - expand_dims:
          axis: 1

  to_onehot:
    apply_func:
      select: null
      func:
      - to_onehot:

  compress_trials:
   compress: 
      select: [train]
      compress_level: subject

  compress_datasets:
    compress: 
      select: [train]
      compress_level: group

  compress_dims:
    apply_func:
      select: null
      func:
      - compress_dims: 
          start: 1

  rescale:
    apply_func:
      select: [train]
      func:
      - rescale:
          scaler:
            _target_: deepbci.data_utils.scalers.STD # deepbci.data_utils.scalers.MinMax
            axis: [0]
          save: true 
          filepath: scalers.pickle

  apply_rescale:
    apply_func:
      select: [test]
      func:
      - rescale:
          load: true 
          filepath: scalers.pickle
          
  log_class_info:
    apply_func:
      select:
      - [train, test]
      func:
      - log_class_info: {}

model_wrapper:
  _target_: deepbci.models.wrappers.Sklearn
  model: 
    _target_: sklearn.svm.SVC
    C: 1.0
    kernel: linear
    class_weight: 
      _target_: deepbci.utils.class_weight.compute_class_weight
      y: ${get_labels:train}
  
model_args:

  logo_level: ['dataset', 'subject', 'trial']

  seed: 0

  dataset:
    shuffle: True

  save:
    filepath: ${join:models,model.pickle}

  evaluate_metrics:
    csv:
      bACC:
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.balanced_accuracy_score}']
      ACC:
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.accuracy_score}']
      tpr:
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.recall_score}']
      ppv:
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.precision_score}']
      tnr:
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.recall_score}']
        pos_label: 0
      F1: 
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.f1_score}']
      # nll:
      #   _target_: functools.partial
      #   _args_: ['${get:sklearn.metrics.log_loss}']
      # PR:
      #   _target_: functools.partial
      #   _args_: ['${get:deepbci.models.metrics.prc_auc_score}']
      #   column: 1
      #   pos_label: 1
      # ROC:
      #   _target_: functools.partial
      #   _args_: ['${get:deepbci.models.metrics.roc_auc_score}']
      #   column: 1
      #   pos_label: 1
      confusion_matrix:
        _target_: functools.partial
        _args_: ['${get:sklearn.metrics.confusion_matrix}']
    log:
      - confusion_matrix
    argmax_axis: 1
    # exclude_argmax:
    #   - nll
    #   - PR
    #   - ROC