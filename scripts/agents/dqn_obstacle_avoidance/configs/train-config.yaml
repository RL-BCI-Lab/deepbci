
graphics: True # Use GUI for pygames graphics
duration: 3000000 # Based on frames, therefore must be divisible by k
train: True
# load_dir: ['test', 'checkpoint.ckpt']
exp_name: ['train'] # directory in which subdirectories are created in
save_frame: 1000000 # Save a new model every n frames.
logging: True # Keep log of training (WARNING: file can become large)

dqn:
  shape: [84, 84, 4] # [state_width, state_height, n]
  actions: 2
  C: 10000 # target network update frequency
  k: 6 # action updates every kth frame and only kth frames are used for training
  n: 4 # agent history
  r: 3 # update frequency (r actions between training = k*r frames between
  alpha: .25e-3
  gamma: .99 
  epsilon: 1 # initial epsilon value
  decay_epsilon: [15000, .01] # [frames needed to decay, final decay value]
  action_to_repeat: 0 # any available actions or None to repeat previously chosen action
  batch_size: 32  
  replay_size: 1000000 # memory size of replay
  replay_start: 5000
  # init_seed: 0
oa:
  scale: 1
  fps: 60 # Target FPS 
  screen_width: 420 # width of the game screen
  screen_height: 420 # height of the game screen
  state_width: 84
  state_height: 84
  freeze_duration: 0 # time in seconds player freezes for after collision
  ball_limit: 40 # potential number of balls on screen at once
  spawn_rate: 70 # rate at which balls spawn (scales with FPS)
  player_size: 7 # bird radius
  player_up: 19 # distance player travels when moving up
  player_down: 65 # gravity effect on player
  ball_size: 11 # ball radius
  ball_speed: 150 # speed balls move
  collide_top: 9 # pixel boundary for colliding with the top of the screen 
  collide_bottom: 5 # pixel boundary for colliding with the bottom of the screen
  collide_ball: 15 # pixel boundary for colliding with a ball
  base_reward: 0
  collision_reward: -1
  seed: 0